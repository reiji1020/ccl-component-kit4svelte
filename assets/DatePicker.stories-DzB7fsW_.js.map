{"version":3,"file":"DatePicker.stories-DzB7fsW_.js","sources":["../../../src/lib/DatePicker.svelte","../../../src/stories/AllColors/AllColorsDatePickerWrapper.svelte","../../../src/stories/DatePicker.stories.ts"],"sourcesContent":["<script lang=\"ts\">\n\timport { createEventDispatcher } from 'svelte';\n\timport { DateTime } from 'luxon';\n\timport './const/variables.css';\n\n\tconst dispatch = createEventDispatcher();\n\n\t/**\n\t * 選択された日付\n\t * @default null\n\t * @type {Date | null}\n\t */\n\texport let selectedDate: Date | null = null;\n\n\t/**\n\t * 日付ピッカーのプレースホルダーテキスト\n\t * @default '日付を選択'\n\t * @type string\n\t */\n\texport let placeholder: string = '日付を選択';\n\n\t/**\n\t * 日付ピッカーのID\n\t * @default ''\n\t * @type string\n\t */\n\texport let id: string = 'date-picker-' + Math.random().toString(36).substring(2, 9);\n\n\t/**\n\t * ボーダーカラー、CCLVividColorの中から選ぶ\n\t * @default --strawberry-pink\n\t * @type string\n\t */\n\texport let borderColor: string = '--strawberry-pink';\n\n\t/**\n\t * blurイベントでカレンダーを閉じないようにするか\n\t * テスト用途で利用\n\t * @default false\n\t * @type boolean\n\t */\n\texport let disableBlurClose: boolean = false;\n\n\tlet showCalendar = false;\n\tlet currentMonth: DateTime = selectedDate ? DateTime.fromJSDate(selectedDate) : DateTime.local();\n\n\t$: formattedDate = selectedDate ? DateTime.fromJSDate(selectedDate).toFormat('yyyy/MM/dd') : '';\n\n\tfunction toggleCalendar() {\n\t\tshowCalendar = !showCalendar;\n\t}\n\n\tfunction selectDay(day: number) {\n\t\tconst newDate = currentMonth.set({ day }).toJSDate();\n\t\tselectedDate = newDate;\n\t\tdispatch('change', newDate);\n\t\tshowCalendar = false;\n\t}\n\n\tfunction prevMonth() {\n\t\tcurrentMonth = currentMonth.minus({ months: 1 });\n\t}\n\n\tfunction nextMonth() {\n\t\tcurrentMonth = currentMonth.plus({ months: 1 });\n\t}\n\n\tfunction getDaysInMonth(date: DateTime) {\n\t\tconst startOfMonth = date.startOf('month');\n\t\tconst endOfMonth = date.endOf('month');\n\t\tconst days = [];\n\n\t\t// 前月の日付を埋める\n\t\tconst startDayOfWeek = startOfMonth.weekday === 7 ? 0 : startOfMonth.weekday; // Luxon: 1=Mon, 7=Sun. Adjust to 0=Sun, 6=Sat\n\t\tfor (let i = 0; i < startDayOfWeek; i++) {\n\t\t\tdays.push(null);\n\t\t}\n\n\t\t// 今月の日付\n\t\tfor (let i = 1; i <= endOfMonth.day; i++) {\n\t\t\tdays.push(i);\n\t\t}\n\n\t\t// 次月の日付を埋める\n\t\tconst remainingDays = 42 - days.length; // 6 rows * 7 days\n\t\tfor (let i = 0; i < remainingDays; i++) {\n\t\t\tdays.push(null);\n\t\t}\n\n\t\treturn days;\n\t}\n\n\t$: daysInMonth = getDaysInMonth(currentMonth);\n</script>\n\n<div class=\"datePickerWrapper\" style=\"--selected-color: var({borderColor});\">\n\t<input type=\"text\" {id} value={formattedDate} placeholder={placeholder} on:focus={toggleCalendar} on:blur={() => { if (!disableBlurClose) toggleCalendar(); }} readonly style=\"border-color: var({borderColor});\" />\n\n\t{#if showCalendar}\n\t\t<div class=\"calendarOverlay\" on:mousedown|preventDefault={() => {}}>\n\t\t\t<div class=\"calendarHeader\">\n\t\t\t\t<button on:click={prevMonth} aria-label=\"前月へ\">&lt;</button>\n\t\t\t\t<span>{currentMonth.toFormat('yyyy年MM月')}</span>\n\t\t\t\t<button on:click={nextMonth} aria-label=\"次月へ\">&gt;</button>\n\t\t\t</div>\n\t\t\t<div class=\"weekdays\">\n\t\t\t\t<span>日</span>\n\t\t\t\t<span>月</span>\n\t\t\t\t<span>火</span>\n\t\t\t\t<span>水</span>\n\t\t\t\t<span>木</span>\n\t\t\t\t<span>金</span>\n\t\t\t\t<span>土</span>\n\t\t\t</div>\n\t\t\t<div class=\"daysGrid\">\n\t\t\t\t{#each daysInMonth as day}\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass:currentMonthDay={day !== null}\n\t\t\t\t\t\tclass:selected={selectedDate && day === DateTime.fromJSDate(selectedDate).day && currentMonth.month === DateTime.fromJSDate(selectedDate).month && currentMonth.year === DateTime.fromJSDate(selectedDate).year}\n\t\t\t\t\t\ton:click={() => day && selectDay(day)}\n\t\t\t\t\t\tdisabled={day === null}\n\t\t\t\t\t>\n\t\t\t\t\t\t{day !== null ? day : ''}\n\t\t\t\t\t</button>\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n</div>\n\n<style lang=\"css\">\n\t.datePickerWrapper {\n\t\tposition: relative;\n\t\tdisplay: inline-block;\n\t}\n\n\t.datePickerWrapper input {\n\t\tpadding: 8px;\n\t\tborder: 1px solid #ccc;\n\t\tborder-radius: 4px;\n\t\twidth: 120px;\n\t}\n\n\t.calendarOverlay {\n\t\tposition: absolute;\n\t\tbackground-color: white;\n\t\tborder: 1px solid #ccc;\n\t\tborder-radius: 4px;\n\t\tpadding: 10px;\n\t\tz-index: 1000;\n\t\tbox-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n\t\tmargin-top: 5px;\n\t}\n\n\t.calendarHeader {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmargin-bottom: 10px;\n\t}\n\n\t.calendarHeader button {\n\t\tbackground: none;\n\t\tborder: none;\n\t\tfont-size: 1.2em;\n\t\tcursor: pointer;\n\t\tpadding: 5px;\n\t}\n\n\t.weekdays,\n\t.daysGrid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(7, 1fr);\n\t\ttext-align: center;\n\t}\n\n\t.weekdays span {\n\t\tfont-weight: bold;\n\t\tpadding: 5px 0;\n\t}\n\n\t.daysGrid button {\n\t\tbackground: none;\n\t\tborder: none;\n\t\tpadding: 0;\n\t\twidth: 30px;\n\t\theight: 30px;\n\t\tline-height: 30px;\n\t\tcursor: pointer;\n\t\tborder-radius: 4px;\n\t}\n\n\t.daysGrid button:hover:not([disabled]) {\n\t\tbackground-color: #eee;\n\t}\n\n\t.daysGrid button.currentMonthDay {\n\t\tcolor: #333;\n\t}\n\n\t.daysGrid button.selected {\n\t\tbackground-color: var(--selected-color);\n\t\tcolor: white;\n\t}\n\n\t.daysGrid button[disabled] {\n\t\tcolor: #ccc;\n\t\tcursor: default;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport DatePicker from '../../lib/DatePicker.svelte';\n\timport { CCLVividColor, CCLPastelColor } from '../../lib/const/config';\n</script>\n\n<div class=\"color-palette\">\n\t<h2>Vivid Colors</h2>\n\t<div class=\"color-grid\">\n\t\t{#each Object.entries(CCLVividColor) as [name, color]}\n\t\t\t<div class=\"color-sample\">\n\t\t\t\t<DatePicker\n\t\t\t\t\tid={`vivid-${name.toLowerCase()}`}\n\t\t\t\t\tplaceholder={name}\n\t\t\t\t\tborderColor={color}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t{/each}\n\t</div>\n\n\t<h2>Pastel Colors</h2>\n\t<div class=\"color-grid\">\n\t\t{#each Object.entries(CCLPastelColor) as [name, color]}\n\t\t\t<div class=\"color-sample\">\n\t\t\t\t<DatePicker\n\t\t\t\t\tid={`pastel-${name.toLowerCase()}`}\n\t\t\t\t\tplaceholder={name}\n\t\t\t\t\tborderColor={color}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t{/each}\n\t</div>\n</div>\n\n<style>\n\t.color-palette {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 2rem;\n\t}\n\t.color-grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n\t\tgap: 1rem;\n\t}\n\t.color-sample {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 0.5rem;\n\t}\n</style>\n","import type { Meta, StoryObj } from '@storybook/svelte';\nimport DatePicker from '../lib/DatePicker.svelte';\nimport { CCLVividColor, CCLPastelColor } from '../lib/const/config';\nimport { expect, fn, userEvent, within } from '@storybook/test';\nimport { DateTime } from 'luxon';\nimport AllColorsDatePickerWrapper from './AllColors/AllColorsDatePickerWrapper.svelte';\n\nconst colorOptions = Object.values(CCLVividColor);\n\nconst meta = {\n\ttitle: 'Form/DatePicker',\n\tcomponent: DatePicker,\n\ttags: ['autodocs'],\n\targTypes: {\n\t\tselectedDate: {\n\t\t\tcontrol: { type: 'date' }\n\t\t},\n\t\tlabel: {\n\t\t\tcontrol: { type: 'text' }\n\t\t},\n\t\tid: {\n\t\t\tcontrol: { type: 'text' }\n\t\t},\n\t\tplaceholder: {\n\t\t\tcontrol: { type: 'text' }\n\t\t},\n\t\tborderColor: {\n\t\t\tcontrol: { type: 'select' },\n\t\t\toptions: Object.values(CCLVividColor)\n\t\t},\n\t\tdisableBlurClose: {\n\t\t\tcontrol: { type: 'boolean' }\n\t\t}\n\t}\n} satisfies Meta<DatePicker>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst createStory = (args: Story['args']): Story => ({\n\targs: {\n\t\t...args,\n\t\tdisableBlurClose: true // テスト中はblurで閉じないようにする\n\t},\n\tplay: async ({ canvasElement, step }) => {\n\t\tconst canvas = within(canvasElement);\n\t\tconst input = canvas.getByPlaceholderText(args.placeholder || '日付を選択');\n\n\t\tawait step('日付ピッカーが開くこと', async () => {\n\t\t\tawait userEvent.click(input);\n\t\t\tawait expect(canvas.getByText(/\\d{4}年\\d{2}月/)).toBeInTheDocument(); // 例: 2023年10月\n\t\t});\n\n\t\t\t\tawait step('日付を選択できること', async () => {\n\t\t\tconst today = DateTime.local(); // Luxonを使用して現在の日付を取得\n\t\t\tconst dayOfMonth = today.day;\n\t\t\tconst dayButton = await canvas.findByRole('button', { name: String(dayOfMonth) });\n\t\t\tawait userEvent.click(dayButton);\n\t\t\tawait expect(input).toHaveValue(today.toFormat('yyyy/MM/dd')); // Luxonのフォーマットに合わせる\n\t\t});\n\n\t\tawait step('日付ピッカーが閉じること', async () => {\n\t\t\tawait expect(canvas.queryByText(/\\d{4}年\\d{2}月/)).not.toBeInTheDocument();\n\t\t});\n\n\t\t\n\t}\n});\n\nexport const Default = createStory({\n\tplaceholder: '日付を選択',\n\tselectedDate: null,\n\tborderColor: CCLVividColor.STRAWBERRY_PINK\n});\n\nexport const WithInitialDate = createStory({\n\tplaceholder: '初期日付',\n\tselectedDate: new Date('2023-01-15'),\n\tborderColor: CCLVividColor.PINEAPPLE_YELLOW\n});\n\nWithInitialDate.play = async ({ canvasElement, step, args }) => {\n\tconst canvas = within(canvasElement);\n\tconst input = canvas.getByPlaceholderText(args.placeholder || '初期日付');\n\n\tawait step('初期日付が正しく表示されていること', async () => {\n\t\tconst expectedDate = DateTime.fromJSDate(args.selectedDate as Date).toFormat('yyyy/MM/dd');\n\t\tawait expect(input).toHaveValue(expectedDate);\n\t});\n};\n\nexport const AllColors: Story = {\n\trender: () => ({ Component: AllColorsDatePickerWrapper }),\n\targs: {},\n\tparameters: {\n\t\tdocs: {\n\t\t\tsource: {\n\t\t\t\tcode: null\n\t\t\t}\n\t\t}\n\t}\n};\n"],"names":["prevMonth","cov_8qwa4gac1","f","s","div2","div1","cov_1eeswispnq","meta","title","component","DatePicker","tags","argTypes","selectedDate","control","type","label","id","placeholder","borderColor","options","Object","values","CCLVividColor","disableBlurClose","createStory","args","play","canvasElement","step","canvas","within","input","getByPlaceholderText","userEvent","click","expect","getByText","toBeInTheDocument","today","DateTime","local","dayOfMonth","day","dayButton","findByRole","name","String","toHaveValue","toFormat","queryByText","not","Default","STRAWBERRY_PINK","WithInitialDate","Date","PINEAPPLE_YELLOW","expectedDate","fromJSDate","AllColors","render","Component","AllColorsDatePickerWrapper","parameters","docs","source","code","originalSource"],"mappings":"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"}