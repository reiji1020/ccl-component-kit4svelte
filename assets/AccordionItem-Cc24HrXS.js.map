{"version":3,"file":"AccordionItem-Cc24HrXS.js","sources":["../../../src/lib/scripts/accordionContext.ts","../../../src/lib/Accordion.svelte","../../../src/lib/AccordionItem.svelte"],"sourcesContent":["export const ACCORDION_CONTEXT_KEY = Symbol('accordion-context');\n","<script lang=\"ts\">\n  import { setContext } from 'svelte';\n  import { writable } from 'svelte/store';\n\n  /**\n   * 複数の項目を同時に開けるようにするかどうか\n   * @default false\n   * @type boolean\n   */\n  export let multiple: boolean = false;\n\n  import { ACCORDION_CONTEXT_KEY } from './scripts/accordionContext';\n\n  const openItems = writable<Set<string>>(new Set());\n\n  function toggleItem(label: string) {\n    openItems.update((currentOpenItems) => {\n      const newOpenItems = new Set(currentOpenItems);\n      if (newOpenItems.has(label)) {\n        newOpenItems.delete(label);\n      } else {\n        if (!multiple) {\n          newOpenItems.clear();\n        }\n        newOpenItems.add(label);\n      }\n      return newOpenItems;\n    });\n  }\n\n  setContext(ACCORDION_CONTEXT_KEY, {\n    openItems,\n    toggleItem,\n    initiallyOpen: (label: string) => {\n      openItems.update((items) => items.add(label));\n    }\n  });\n</script>\n\n<div class=\"accordion-wrapper\" role=\"presentation\">\n  <slot />\n</div>\n\n<style>\n  .accordion-wrapper {\n    border: 1px solid #e0e0e0;\n    border-radius: 8px;\n    overflow: hidden;\n  }\n</style>\n","<script lang=\"ts\">\n  import { getContext, onMount } from 'svelte';\n  import { writable, type Readable } from 'svelte/store';\n\n  /**\n   * 項目のヘッダーとして常に表示されるテキスト\n   * @type string\n   */\n  export let label: string;\n\n  /**\n   * 項目の初期状態を開いた状態にするかどうか\n   * @default false\n   * @type boolean\n   */\n  export let isOpen: boolean = false;\n\n  /**\n   * ヘッダーの背景色\n   * @type {string | undefined}\n   */\n  export let headerColor: string | undefined = undefined;\n\n  /**\n   * コンテンツエリアの背景色\n   * @type {string | undefined}\n   */\n  export let contentColor: string | undefined = undefined;\n\n  import { ACCORDION_CONTEXT_KEY } from './scripts/accordionContext';\n\n  interface AccordionContext {\n    openItems: Readable<Set<string>>;\n    toggleItem: (label: string) => void;\n    initiallyOpen: (label: string) => void;\n  }\n\n  const { openItems, toggleItem, initiallyOpen } =\n    getContext<AccordionContext>(ACCORDION_CONTEXT_KEY);\n\n  onMount(() => {\n    if (isOpen) {\n      initiallyOpen(label);\n    }\n  });\n\n  let isContentOpen = false;\n  $: isContentOpen = $openItems.has(label);\n</script>\n\n<div\n  class=\"accordion-item\"\n  style={`${headerColor ? `--header-bg-color: var(${headerColor});` : ''}${contentColor ? `--content-bg-color: var(${contentColor});` : ''}`}\n>\n  <h2 class=\"accordion-header\">\n    <button\n      class=\"accordion-button\"\n      aria-expanded={isContentOpen}\n      aria-controls={`accordion-panel-${label}`}\n      on:click={() => toggleItem(label)}\n    >\n      <span class=\"button-label\">{label}</span>\n      <span class=\"accordion-icon\" class:open={isContentOpen} aria-hidden=\"true\">▼</span>\n    </button>\n  </h2>\n  {#if isContentOpen}\n    <div\n      class=\"accordion-content\"\n      id={`accordion-panel-${label}`}\n      role=\"region\"\n      aria-labelledby={`accordion-button-${label}`}\n    >\n      <div class=\"content-padding\">\n        <slot />\n      </div>\n    </div>\n  {/if}\n</div>\n\n<style>\n  .accordion-item {\n    border-bottom: 1px solid #e0e0e0;\n  }\n\n  .accordion-item:last-child {\n    border-bottom: none;\n  }\n\n  .accordion-header {\n    margin: 0;\n  }\n\n  .accordion-button {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 16px 20px;\n    font-size: 1rem;\n    font-weight: 600;\n    color: #333;\n    background-color: var(--header-bg-color, #f9f9f9);\n    border: none;\n    cursor: pointer;\n    text-align: left;\n    transition: filter 0.2s ease-in-out;\n  }\n\n  .accordion-button:hover {\n    filter: brightness(95%);\n  }\n\n  .accordion-icon {\n    transition: transform 0.2s ease-in-out;\n    transform: rotate(0deg);\n  }\n\n  .accordion-icon.open {\n    transform: rotate(180deg);\n  }\n\n  .accordion-content {\n    background-color: var(--content-bg-color, white);\n  }\n\n  .content-padding {\n    padding: 16px 20px;\n  }\n</style>\n"],"names":["ACCORDION_CONTEXT_KEY","cov_1g5qro1sqt","s","Symbol","multiple","cov_jy0qvufni","$","$$props","newOpenItems","Set","currentOpenItems","delete","label","b","clear","setContext","toggleItem","initiallyOpen","f","cov_21ju0ys2b3","undefined","isOpen","isContentOpen","$openItems","has","headerColor","contentColor"],"mappings":"61CAAO,MAAMA,GAAAC,EAAA,EAAAC,EAAA,CAAA,IAAwBC,OAAO,mBAAmB,mlMCA/D,IAAAC,GAAAC,EAAA,EAAAH,EAAA,CAAA,IAAAI,EAAAC,EAAA,WAAA,EAAA,EAAA,qGASaC,GAAiBH,EAAA,EAAAH,EAAA,CAAA,IAAA,IAAAO,IAAAC,CAAG,GAAAL,OAAAA,EAAA,EAAAH,EAAA,CAAA,uCAIzBM,EAAYG,OAAQC,CAAkB,6BAEnCR,EAAW,EAEVC,EAAA,EAAAQ,EAAA,CAAA,EAAA,CAAA,KAFUR,EAAA,EAAAQ,EAAA,CAAA,EAAA,CAAA,IAAAR,EAAA,EAAAH,EAAA,CAAA,IAClBM,EAAkBM,MAAA,GACVT,EAAA,EAAAH,kBACFG,EAAA,EAAAH,EAAA,EAAA,IACFM,CACD,CAAA,CACM,CAAAH,EAAA,EAAAH,QAELa,EAAAf,EAAA,aACAgB,WAAAA,EACFC,cAAAL,GAAA,CAAAP,EAAA,EAAAa,EAAA,CAAA,IAAAb,EAAA,EAAAH,EAAA,EAAA,uMAGJ,q1WCb6BiB,EAAA,EAAAjB,EAAA,CAAA,IAAAI,EAAAC,mBAAKa,MAAA,gHAsB1BC,EAAA,GAAAF,EAAA,EAAAN,EAAA,CAAA,EAAA,CAAA,IAAAM,IAAAjB,EAAA,EAAA,YAGRiB,IAAAN,EAAA,CAAA,EAAA,CAAA,GACM,CAAA,EAEJ,IAAAS,GAAAH,EAAA,EAAAjB,EAAA,EAAA,IAAAI,EAAA,EAAA,GAAAa,IAAAjB,EAAA,EAAA,0EACDI,EAAAgB,EAAAC,IAAAC,IAAAZ,stBAGEa,KAAgBN,EAAA,EAAAN,oCAAoBY,EAAA,CAAA,OAAAN,EAAA,EAAAN,EAAA,CAAA,EAAA,CAAA,IAAA,GAAA,GAAAa,EAAA,GAAAP,EAAA,EAAAN,EAAA,CAAA,EAAA,CAAA,IAAA,2BAAAa,EAAA,CAAA,OAAAP,EAAA,EAAAN,EAAA,CAAA,EAAA,CAAA,IAAA,GAAA,EAAA,EAAAM,EAAA,EAAAjB,EAAA,EAAA"}