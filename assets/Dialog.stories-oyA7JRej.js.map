{"version":3,"file":"Dialog.stories-oyA7JRej.js","sources":["../../../src/stories/DialogStoryWrapper.svelte","../../../src/stories/AllColors/AllColorsDialogWrapper.svelte","../../../src/stories/Dialog.stories.ts"],"sourcesContent":["<script lang=\"ts\">\n  import Dialog from '$lib/Dialog.svelte';\n  import Button from '$lib/Button.svelte';\n  import { CCLVividColor, CCLPastelColor } from '$lib/const/config';\n\n  export let open = false;\n  export let title = 'ダイアログのタイトル';\n  export let borderColor = CCLVividColor.SODA_BLUE;\n\n  function onClose() {\n    open = false;\n  }\n</script>\n\n<Button label=\"Open\" bgColor={CCLVividColor.SODA_BLUE} onClick={() => (open = true)} />\n\n<Dialog {open} {title} {borderColor} on:close={onClose}>\n  <p>ここに任意のコンテンツを配置できます。</p>\n  <svelte:fragment slot=\"footer\">\n    <Button label=\"Cancel\" bgColor={CCLPastelColor.CLOUD_GREY} onClick={() => (open = false)} />\n    <Button label=\"OK\" bgColor={CCLVividColor.STRAWBERRY_PINK} onClick={() => (open = false)} />\n  </svelte:fragment>\n</Dialog>\n","<script lang=\"ts\">\n  import Dialog from '../../lib/Dialog.svelte';\n  import Button from '../../lib/Button.svelte';\n  import { CCLVividColor, CCLPastelColor } from '../../lib/const/config';\n\n  type Entry = { name: string; color: string; open: boolean };\n  let vividEntries: Entry[] = Object.entries(CCLVividColor).map(([name, color]) => ({\n    name,\n    color,\n    open: false\n  }));\n\n  function openAt(i: number) {\n    vividEntries[i].open = true;\n    vividEntries = [...vividEntries];\n  }\n\n  function closeAt(i: number) {\n    vividEntries[i].open = false;\n    vividEntries = [...vividEntries];\n  }\n</script>\n\n<div class=\"color-palette\">\n  <h2>Vivid Colors</h2>\n  <div class=\"color-grid\">\n    {#each vividEntries as item, i}\n      <div class=\"color-sample\">\n        <Button label={`Open (${item.name})`} bgColor={item.color} onClick={() => openAt(i)} />\n        <Dialog\n          open={item.open}\n          title={item.name}\n          borderColor={item.color}\n          on:close={() => closeAt(i)}\n        >\n          <p>このダイアログは {item.name} の色設定で表示されています。</p>\n          <svelte:fragment slot=\"footer\">\n            <Button label=\"Cancel\" bgColor={CCLPastelColor.CLOUD_GREY} onClick={() => closeAt(i)} />\n            <Button label=\"OK\" bgColor={CCLVividColor.STRAWBERRY_PINK} onClick={() => closeAt(i)} />\n          </svelte:fragment>\n        </Dialog>\n      </div>\n    {/each}\n  </div>\n</div>\n\n<style>\n  .color-palette {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    padding: 1rem;\n  }\n  .color-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    gap: 1rem;\n  }\n  .color-sample {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 0.75rem;\n  }\n</style>\n","import type { Meta, StoryObj } from '@storybook/svelte';\nimport Dialog from '$lib/Dialog.svelte';\nimport DialogStoryWrapper from './DialogStoryWrapper.svelte';\nimport { CCLVividColor } from '$lib/const/config';\nimport AllColorsDialogWrapper from './AllColors/AllColorsDialogWrapper.svelte';\nimport { expect, userEvent, within } from '@storybook/test';\n\nconst colorOptions = [\n  CCLVividColor.STRAWBERRY_PINK,\n  CCLVividColor.PINEAPPLE_YELLOW,\n  CCLVividColor.SODA_BLUE,\n  CCLVividColor.MELON_GREEN,\n  CCLVividColor.GRAPE_PURPLE,\n  CCLVividColor.WRAP_GREY\n];\n\nconst meta = {\n  title: 'CommonComponents/Dialog',\n  component: Dialog,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'fullscreen'\n  },\n  argTypes: {\n    open: { control: { type: 'boolean' } },\n    title: { control: { type: 'text' } },\n    borderColor: { control: { type: 'select' }, options: colorOptions },\n    closeOnEsc: { control: { type: 'boolean' } },\n    closeOnOutside: { control: { type: 'boolean' } }\n  }\n} satisfies Meta<Dialog>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nexport const Default: Story = {\n  render: () => ({ Component: DialogStoryWrapper }),\n  args: {},\n  parameters: {\n    docs: {\n      story: {\n        height: '24vh'\n      },\n      source: {\n        code: `\n<script>\n  import { Dialog, Button, CCLVividColor, CCLPastelColor } from 'cclkit4svelte';\n  let open = false;\n</script>\n\n<Button label=\"Open\" bgColor={CCLVividColor.SODA_BLUE} onClick={() => (open = true)} />\n\n<Dialog {open} title=\"ダイアログのタイトル\" borderColor={CCLVividColor.SODA_BLUE} on:close={() => (open = false)}>\n  <p>ここに任意のコンテンツを配置できます。</p>\n  <svelte:fragment slot=\"footer\">\n    <Button label=\"Cancel\" bgColor={CCLPastelColor.CLOUD_GREY} onClick={() => (open = false)} />\n    <Button label=\"OK\" bgColor={CCLVividColor.STRAWBERRY_PINK} onClick={() => (open = false)} />\n  </svelte:fragment>\n</Dialog>\n        `.trim()\n      }\n    }\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    // 目的: ボタンでダイアログを開閉できること\n    await step('ダイアログを開けること', async () => {\n      const openBtn = canvas.getByRole('button', { name: 'Open' });\n      await userEvent.click(openBtn);\n      const dialog = await canvas.findByRole('dialog');\n      await expect(dialog).toBeInTheDocument();\n    });\n\n    await step('×ボタンで閉じられること', async () => {\n      const closeBtn = canvas.getByLabelText('Close dialog');\n      await userEvent.click(closeBtn);\n      const dialogAfter = canvas.queryByRole('dialog');\n      await expect(dialogAfter).not.toBeInTheDocument();\n    });\n  }\n};\n\nexport const CloseByEscAndOutside: Story = {\n  render: () => ({ Component: DialogStoryWrapper }),\n  args: {},\n  parameters: {\n    docs: {\n      story: {\n        height: '24vh'\n      }\n    }\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    // 目的: ESCキーと外側クリックで閉じられること\n    const openBtn = canvas.getByRole('button', { name: 'Open' });\n    await userEvent.click(openBtn);\n    const dialog = await canvas.findByRole('dialog');\n    await expect(dialog).toBeInTheDocument();\n\n    await step('ESCキーで閉じられること', async () => {\n      await userEvent.keyboard('{Escape}');\n      await expect(canvas.queryByRole('dialog')).not.toBeInTheDocument();\n    });\n\n    await step('外側クリックで閉じられること', async () => {\n      await userEvent.click(openBtn);\n      await expect(await canvas.findByRole('dialog')).toBeInTheDocument();\n      // 背景（オーバーレイ）をクリック - クラス選択で確実に取得\n      const backdrop = canvasElement.querySelector('.ccl-dialog-backdrop') as HTMLElement;\n      await expect(backdrop).toBeTruthy();\n      await userEvent.click(backdrop);\n      await expect(canvas.queryByRole('dialog')).not.toBeInTheDocument();\n    });\n  }\n};\n\nexport const AllColors: Story = {\n  render: () => ({ Component: AllColorsDialogWrapper }),\n  args: {},\n  parameters: {\n    docs: {\n      source: {\n        code: null\n      }\n    }\n  }\n};\n"],"names":["open","cov_1dg7bjc8j7","s","$","$$props","CCLVividColor","f","SODA_BLUE","onClick","onClose","CCLPastelColor","CLOUD_GREY","STRAWBERRY_PINK","openAt","i","cov_2kx99dqyfj","closeAt","vividEntries","item","color","colorOptions","PINEAPPLE_YELLOW","MELON_GREEN","GRAPE_PURPLE","WRAP_GREY","meta","title","component","Dialog","tags","parameters","layout","argTypes","control","type","borderColor","options","closeOnEsc","closeOnOutside","Default","render","Component","DialogStoryWrapper","args","docs","story","height","source","code","trim","play","canvasElement","step","canvas","within","openBtn","getByRole","name","userEvent","click","dialog","findByRole","expect","toBeInTheDocument","closeBtn","getByLabelText","dialogAfter","queryByRole","not","CloseByEscAndOutside","keyboard","backdrop","querySelector","toBeTruthy","AllColors","AllColorsDialogWrapper","originalSource"],"mappings":"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"}