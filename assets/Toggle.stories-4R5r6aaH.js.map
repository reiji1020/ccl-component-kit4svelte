{"version":3,"file":"Toggle.stories-4R5r6aaH.js","sources":["../../../src/stories/AllColors/AllColorsToggleWrapper.svelte","../../../src/stories/Toggle.stories.ts"],"sourcesContent":["<script lang=\"ts\">\n  import Toggle from '../../lib/Toggle.svelte';\n  import { CCLVividColor, CCLPastelColor } from '../../lib/const/config';\n</script>\n\n<div class=\"color-palette\">\n  <h2>Vivid Colors</h2>\n  <div class=\"color-grid\">\n    {#each Object.entries(CCLVividColor) as [name, color]}\n      <div class=\"color-sample\">\n        <Toggle checked={true} {color} />\n        <span>{name}</span>\n      </div>\n    {/each}\n  </div>\n\n  <h2>Pastel Colors</h2>\n  <div class=\"color-grid\">\n    {#each Object.entries(CCLPastelColor) as [name, color]}\n      <div class=\"color-sample\">\n        <Toggle checked={true} {color} />\n        <span>{name}</span>\n      </div>\n    {/each}\n  </div>\n</div>\n\n<style>\n  .color-palette {\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n  }\n  .color-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    gap: 1rem;\n  }\n  .color-sample {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.5rem;\n  }\n</style>\n","import type { Meta, StoryObj } from '@storybook/svelte';\nimport Toggle from '../lib/Toggle.svelte';\nimport { CCLVividColor, CCLPastelColor } from '../lib/const/config';\nimport { expect, fn, userEvent, within } from '@storybook/test';\nimport AllColorsToggleWrapper from './AllColors/AllColorsToggleWrapper.svelte';\n\nconst meta = {\n  title: 'Form/Toggle',\n  component: Toggle,\n  tags: ['autodocs'],\n  argTypes: {\n    checked: {\n      control: { type: 'boolean' }\n    },\n    color: {\n      control: { type: 'select' },\n      options: Object.values(CCLVividColor)\n    },\n    disabled: {\n      control: { type: 'boolean' }\n    },\n    onChange: fn()\n  }\n} satisfies Meta<Toggle>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nconst createStory = (initialArgs: Story['args']): Story => ({\n  args: {\n    ...initialArgs,\n    onChange: fn() // Ensure onChange is always a spy\n  },\n  play: async ({ args, canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const toggle = canvas.getByRole('checkbox', { hidden: true });\n\n    await step('初期状態が正しいこと', async () => {\n      if (args?.checked) {\n        await expect(toggle).toBeChecked();\n      } else {\n        await expect(toggle).not.toBeChecked();\n      }\n    });\n\n    await step('クリック操作が正しく行われること', async () => {\n      await userEvent.click(toggle);\n      if (args?.disabled) {\n        await expect(args.onChange).not.toHaveBeenCalled();\n        await step('非活性時は状態が変化しないこと', async () => {\n          if (args?.checked) {\n            await expect(toggle).toBeChecked();\n          } else {\n            await expect(toggle).not.toBeChecked();\n          }\n        });\n      } else {\n        await expect(args.onChange).toHaveBeenCalledOnce();\n        await step('活性時は状態が変化すること', async () => {\n          if (args?.checked) {\n            await expect(toggle).not.toBeChecked(); // Will be false after click\n          } else {\n            await expect(toggle).toBeChecked(); // Will be true after click\n          }\n        });\n      }\n    });\n  }\n});\n\nexport const Default = createStory({\n  checked: false\n});\n\nexport const Checked = createStory({\n  checked: true\n});\n\nexport const Disabled = createStory({\n  checked: false,\n  disabled: true\n});\n\nexport const DisabledChecked = createStory({\n  checked: true,\n  disabled: true\n});\n\nexport const AllColors: Story = {\n  render: () => ({ Component: AllColorsToggleWrapper }),\n  args: {},\n  parameters: {\n    docs: {\n      source: {\n        code: null\n      }\n    }\n  }\n};\n"],"names":["meta","title","component","Toggle","tags","argTypes","checked","control","type","color","options","Object","values","CCLVividColor","disabled","onChange","fn","createStory","initialArgs","args","play","canvasElement","step","toggle","within","getByRole","hidden","expect","toBeChecked","not","userEvent","click","toHaveBeenCalled","toHaveBeenCalledOnce","Default","Checked","Disabled","DisabledChecked","AllColors","render","Component","AllColorsToggleWrapper","parameters","docs","source","code","originalSource"],"mappings":"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"}