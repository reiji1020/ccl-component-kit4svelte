{"version":3,"file":"ProgressBar.stories-Dim_xcp9.js","sources":["../../../src/stories/AllColors/AllColorsProgressBarWrapper.svelte","../../../src/stories/ProgressBar.stories.ts"],"sourcesContent":["<script lang=\"ts\">\n  import ProgressBar from '../../lib/ProgressBar.svelte';\n  import { CCLVividColor, CCLPastelColor } from '../../lib/const/config';\n\n  const vividColors = [\n    { name: 'STRAWBERRY_PINK', bar: CCLVividColor.STRAWBERRY_PINK, bg: CCLPastelColor.PEACH_PINK },\n    { name: 'PINEAPPLE_YELLOW', bar: CCLVividColor.PINEAPPLE_YELLOW, bg: CCLPastelColor.LEMON_YELLOW },\n    { name: 'SODA_BLUE', bar: CCLVividColor.SODA_BLUE, bg: CCLPastelColor.SUGAR_BLUE },\n    { name: 'MELON_GREEN', bar: CCLVividColor.MELON_GREEN, bg: CCLPastelColor.MATCHA_GREEN },\n    { name: 'GRAPE_PURPLE', bar: CCLVividColor.GRAPE_PURPLE, bg: CCLPastelColor.AKEBI_PURPLE },\n    { name: 'WRAP_GREY', bar: CCLVividColor.WRAP_GREY, bg: CCLPastelColor.CLOUD_GREY }\n  ];\n\n  const pastelColors = [\n    { name: 'PEACH_PINK', bar: CCLPastelColor.PEACH_PINK, bg: CCLVividColor.STRAWBERRY_PINK },\n    { name: 'LEMON_YELLOW', bar: CCLPastelColor.LEMON_YELLOW, bg: CCLVividColor.PINEAPPLE_YELLOW },\n    { name: 'SUGAR_BLUE', bar: CCLPastelColor.SUGAR_BLUE, bg: CCLVividColor.SODA_BLUE },\n    { name: 'MATCHA_GREEN', bar: CCLPastelColor.MATCHA_GREEN, bg: CCLVividColor.MELON_GREEN },\n    { name: 'AKEBI_PURPLE', bar: CCLPastelColor.AKEBI_PURPLE, bg: CCLVividColor.GRAPE_PURPLE },\n    { name: 'CLOUD_GREY', bar: CCLPastelColor.CLOUD_GREY, bg: CCLVividColor.WRAP_GREY }\n  ];\n</script>\n\n<div style=\"display: flex; flex-direction: column; gap: 40px; padding: 20px;\">\n  <div>\n    <h3>Vivid Colors</h3>\n    <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n      {#each vividColors as colorOption}\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px; border: 1px solid #eee; padding: 15px; border-radius: 8px; width: 300px;\">\n          <ProgressBar value={50} maxValue={100} barColor={colorOption.bar} backgroundColor={colorOption.bg} containerWidth=\"100%\" height=\"20px\" />\n          <span style=\"font-size: 14px; color: #555;\">{colorOption.name}</span>\n        </div>\n      {/each}\n    </div>\n  </div>\n\n  <div>\n    <h3>Pastel Colors</h3>\n    <div style=\"display: flex; flex-direction: column; gap: 20px;\">\n      {#each pastelColors as colorOption}\n        <div style=\"display: flex; flex-direction: column; align-items: center; gap: 10px; border: 1px solid #eee; padding: 15px; border-radius: 8px; width: 300px;\">\n          <ProgressBar value={50} maxValue={100} barColor={colorOption.bar} backgroundColor={colorOption.bg} containerWidth=\"100%\" height=\"20px\" />\n          <span style=\"font-size: 14px; color: #555;\">{colorOption.name}</span>\n        </div>\n      {/each}\n    </div>\n  </div>\n</div>\n","import type { Meta, StoryObj } from '@storybook/svelte';\nimport ProgressBar from '../lib/ProgressBar.svelte';\nimport { expect, within } from '@storybook/test';\nimport { CCLVividColor, CCLPastelColor, ProgressBarHeight } from '../lib/const/config';\n\nconst colorOptions = [\n  ...Object.values(CCLVividColor),\n  ...Object.values(CCLPastelColor)\n];\n\nconst meta = {\n  title: 'CommonComponents/ProgressBar',\n  component: ProgressBar,\n  tags: ['autodocs'],\n  parameters: {\n    layout: 'padded'\n  },\n  argTypes: {\n    value: {\n      control: { type: 'range', min: 0, max: 100, step: 1 },\n      description: '現在の進捗 (0-100)'\n    },\n    maxValue: {\n      control: { type: 'number' },\n      description: '最大値'\n    },\n    barColor: {\n      control: { type: 'select' },\n      options: colorOptions,\n      description: 'プログレスバーの色'\n    },\n    backgroundColor: {\n      control: { type: 'select' },\n      options: colorOptions,\n      description: 'プログレスバーの背景色'\n    },\n    height: {\n      control: { type: 'select' },\n      options: Object.values(ProgressBarHeight),\n      description: 'プログレスバーの高さ'\n    },\n    containerWidth: {\n      control: { type: 'text' },\n      description: 'プログレスバー全体の幅 (例: \"100%\", \"300px\")'\n    },\n    isSticky: {\n      control: { type: 'boolean' },\n      description: 'ページ上部に固定表示するかどうか'\n    },\n    isRounded: {\n      control: { type: 'boolean' },\n      description: '角を丸くするかどうか'\n    }\n  }\n} satisfies Meta<ProgressBar>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\nimport AllColorsProgressBarWrapper from './AllColors/AllColorsProgressBarWrapper.svelte';\n\nexport const Default: Story = {\n  args: {\n    value: 50,\n    maxValue: 100,\n    barColor: CCLVividColor.SODA_BLUE,\n    backgroundColor: CCLPastelColor.SUGAR_BLUE,\n    height: ProgressBarHeight.DEFAULT,\n    containerWidth: '100%'\n  },\n  play: async ({ canvasElement, step, args }) => {\n    const canvas = within(canvasElement);\n    const progressBarContainer = canvas.getByRole('progressbar') as HTMLElement;\n    const progressBar = progressBarContainer.querySelector('.progress-bar') as HTMLElement;\n\n    await step('プログレスバーコンテナが表示されていること', async () => {\n      await expect(progressBarContainer).toBeInTheDocument();\n    });\n\n    await step('aria属性が正しく設定されていること', async () => {\n      await expect(progressBarContainer).toHaveAttribute('aria-valuenow', String(args.value));\n      await expect(progressBarContainer).toHaveAttribute('aria-valuemin', '0');\n      await expect(progressBarContainer).toHaveAttribute('aria-valuemax', String(args.maxValue));\n    });\n\n    await step('コンテナの幅と高さが指定通りであること', async () => {\n      expect(progressBarContainer.style.width).toBe(args.containerWidth);\n      expect(progressBarContainer.style.height).toBe(args.height);\n    });\n\n    await step('バーの幅(%)が正しく計算されてstyleに適用されていること', async () => {\n      const expectedProgress = (args.value / args.maxValue) * 100;\n      await expect(progressBar.style.width).toBe(`${expectedProgress}%`);\n    });\n  }\n};\n\nexport const NotRounded: Story = {\n  args: {\n    ...Default.args,\n    isRounded: false\n  },\n  play: async ({ canvasElement, step, args }) => {\n    const canvas = within(canvasElement);\n    const progressBarContainer = canvas.getByRole('progressbar') as HTMLElement;\n\n    await step('角が丸くなっていないこと', async () => {\n      const styles = window.getComputedStyle(progressBarContainer);\n      expect(styles.borderRadius).toBe('0px');\n    });\n  }\n};\n\nexport const Sticky: Story = {\n  args: {\n    ...Default.args,\n    isSticky: true\n  },\n  play: async ({ canvasElement, step, args }) => {\n    const canvas = within(canvasElement);\n    const progressBarContainer = canvas.getByRole('progressbar') as HTMLElement;\n\n    await step('ページ上部に固定されていること', async () => {\n      const styles = window.getComputedStyle(progressBarContainer);\n      expect(styles.position).toBe('fixed');\n    });\n  }\n};\n\nexport const FullProgress: Story = {\n  args: {\n    value: 100,\n    maxValue: 100,\n    barColor: CCLVividColor.MELON_GREEN,\n    backgroundColor: CCLPastelColor.LEMON_YELLOW,\n    height: ProgressBarHeight.WIDE,\n    containerWidth: '80%'\n  },\n  play: async ({ canvasElement, step, args }) => {\n    const canvas = within(canvasElement);\n    const progressBarContainer = canvas.getByRole('progressbar') as HTMLElement;\n    const progressBar = progressBarContainer.querySelector('.progress-bar') as HTMLElement;\n\n    await step('プログレスバーコンテナが表示されていること', async () => {\n      await expect(progressBarContainer).toBeInTheDocument();\n    });\n\n    await step('aria属性が正しく設定されていること', async () => {\n      await expect(progressBarContainer).toHaveAttribute('aria-valuenow', String(args.value));\n      await expect(progressBarContainer).toHaveAttribute('aria-valuemin', '0');\n      await expect(progressBarContainer).toHaveAttribute('aria-valuemax', String(args.maxValue));\n    });\n\n    await step('コンテナの幅と高さが指定通りであること', async () => {\n      expect(progressBarContainer.style.width).toBe(args.containerWidth);\n      expect(progressBarContainer.style.height).toBe(args.height);\n    });\n\n    await step('バーの幅(%)が正しく計算されてstyleに適用されていること', async () => {\n      const expectedProgress = (args.value / args.maxValue) * 100;\n      await expect(progressBar.style.width).toBe(`${expectedProgress}%`);\n    });\n  }\n};\n\nexport const AllColors: Story = {\n  render: () => ({ Component: AllColorsProgressBarWrapper }),\n  args: {},\n  parameters: {\n    docs: {\n      source: {\n        code: null\n      }\n    }\n  }\n};\n"],"names":["target","div","anchor","cov_exld00gp3","s","colorOptions","Object","values","CCLVividColor","CCLPastelColor","meta","title","component","ProgressBar","tags","parameters","layout","argTypes","value","control","type","min","max","step","description","maxValue","barColor","options","backgroundColor","height","ProgressBarHeight","containerWidth","isSticky","isRounded","Default","args","SODA_BLUE","SUGAR_BLUE","DEFAULT","play","canvasElement","progressBarContainer","within","getByRole","progressBar","querySelector","expect","toBeInTheDocument","toHaveAttribute","String","style","width","toBe","expectedProgress","NotRounded","styles","window","getComputedStyle","borderRadius","Sticky","position","FullProgress","MELON_GREEN","LEMON_YELLOW","WIDE","AllColors","render","Component","AllColorsProgressBarWrapper","docs","source","code","originalSource"],"mappings":"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"}