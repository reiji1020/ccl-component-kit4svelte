{"version":3,"file":"Table.stories-e548e738.js","sources":["../../../node_modules/.pnpm/svelte@4.2.18/node_modules/svelte/src/runtime/internal/each.js","../../../src/lib/Table.svelte"],"sourcesContent":["import { transition_in, transition_out } from './transitions.js';\nimport { run_all } from './utils.js';\n\n// general each functions:\n\nexport function ensure_array_like(array_like_or_iterator) {\n\treturn array_like_or_iterator?.length !== undefined\n\t\t? array_like_or_iterator\n\t\t: Array.from(array_like_or_iterator);\n}\n\n// keyed each functions:\n\n/** @returns {void} */\nexport function destroy_block(block, lookup) {\n\tblock.d(1);\n\tlookup.delete(block.key);\n}\n\n/** @returns {void} */\nexport function outro_and_destroy_block(block, lookup) {\n\ttransition_out(block, 1, 1, () => {\n\t\tlookup.delete(block.key);\n\t});\n}\n\n/** @returns {void} */\nexport function fix_and_destroy_block(block, lookup) {\n\tblock.f();\n\tdestroy_block(block, lookup);\n}\n\n/** @returns {void} */\nexport function fix_and_outro_and_destroy_block(block, lookup) {\n\tblock.f();\n\toutro_and_destroy_block(block, lookup);\n}\n\n/** @returns {any[]} */\nexport function update_keyed_each(\n\told_blocks,\n\tdirty,\n\tget_key,\n\tdynamic,\n\tctx,\n\tlist,\n\tlookup,\n\tnode,\n\tdestroy,\n\tcreate_each_block,\n\tnext,\n\tget_context\n) {\n\tlet o = old_blocks.length;\n\tlet n = list.length;\n\tlet i = o;\n\tconst old_indexes = {};\n\twhile (i--) old_indexes[old_blocks[i].key] = i;\n\tconst new_blocks = [];\n\tconst new_lookup = new Map();\n\tconst deltas = new Map();\n\tconst updates = [];\n\ti = n;\n\twhile (i--) {\n\t\tconst child_ctx = get_context(ctx, list, i);\n\t\tconst key = get_key(child_ctx);\n\t\tlet block = lookup.get(key);\n\t\tif (!block) {\n\t\t\tblock = create_each_block(key, child_ctx);\n\t\t\tblock.c();\n\t\t} else if (dynamic) {\n\t\t\t// defer updates until all the DOM shuffling is done\n\t\t\tupdates.push(() => block.p(child_ctx, dirty));\n\t\t}\n\t\tnew_lookup.set(key, (new_blocks[i] = block));\n\t\tif (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));\n\t}\n\tconst will_move = new Set();\n\tconst did_move = new Set();\n\t/** @returns {void} */\n\tfunction insert(block) {\n\t\ttransition_in(block, 1);\n\t\tblock.m(node, next);\n\t\tlookup.set(block.key, block);\n\t\tnext = block.first;\n\t\tn--;\n\t}\n\twhile (o && n) {\n\t\tconst new_block = new_blocks[n - 1];\n\t\tconst old_block = old_blocks[o - 1];\n\t\tconst new_key = new_block.key;\n\t\tconst old_key = old_block.key;\n\t\tif (new_block === old_block) {\n\t\t\t// do nothing\n\t\t\tnext = new_block.first;\n\t\t\to--;\n\t\t\tn--;\n\t\t} else if (!new_lookup.has(old_key)) {\n\t\t\t// remove old block\n\t\t\tdestroy(old_block, lookup);\n\t\t\to--;\n\t\t} else if (!lookup.has(new_key) || will_move.has(new_key)) {\n\t\t\tinsert(new_block);\n\t\t} else if (did_move.has(old_key)) {\n\t\t\to--;\n\t\t} else if (deltas.get(new_key) > deltas.get(old_key)) {\n\t\t\tdid_move.add(new_key);\n\t\t\tinsert(new_block);\n\t\t} else {\n\t\t\twill_move.add(old_key);\n\t\t\to--;\n\t\t}\n\t}\n\twhile (o--) {\n\t\tconst old_block = old_blocks[o];\n\t\tif (!new_lookup.has(old_block.key)) destroy(old_block, lookup);\n\t}\n\twhile (n) insert(new_blocks[n - 1]);\n\trun_all(updates);\n\treturn new_blocks;\n}\n\n/** @returns {void} */\nexport function validate_each_keys(ctx, list, get_context, get_key) {\n\tconst keys = new Map();\n\tfor (let i = 0; i < list.length; i++) {\n\t\tconst key = get_key(get_context(ctx, list, i));\n\t\tif (keys.has(key)) {\n\t\t\tlet value = '';\n\t\t\ttry {\n\t\t\t\tvalue = `with value '${String(key)}' `;\n\t\t\t} catch (e) {\n\t\t\t\t// can't stringify\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(\n\t\t\t\t\tkey\n\t\t\t\t)} and ${i} ${value}are duplicates`\n\t\t\t);\n\t\t}\n\t\tkeys.set(key, i);\n\t}\n}\n","<script lang=\"ts\">\n\timport { CCLPastelColor, CCLVividColor } from '$lib/const/config';\n\timport './const/variables.css';\n\t/**\n\t * テーブルメインカラー\n\t * CCLVividColorの中から指定する\n\t * @default --strawberry-pink\n\t * @type string\n\t */\n\texport let tableColor: string;\n\t/**\n\t * テーブルサブカラー\n\t * CCLPasterColorの中から指定する\n\t * @default --peach-pink\n\t * @type string\n\t */\n\tlet bodyColor: string;\n\n\tswitch (tableColor) {\n\t\tcase CCLVividColor.STRAWBERRY_PINK:\n\t\t\tbodyColor = CCLPastelColor.PEACH_PINK;\n\t\t\tbreak;\n\t\tcase CCLVividColor.PINEAPPLE_YELLOW:\n\t\t\tbodyColor = CCLPastelColor.LEMON_YELLOW;\n\t\t\tbreak;\n\t\tcase CCLVividColor.SODA_BLUE:\n\t\t\tbodyColor = CCLPastelColor.SUGAR_BLUE;\n\t\t\tbreak;\n\t\tcase CCLVividColor.MELON_GREEN:\n\t\t\tbodyColor = CCLPastelColor.MATCHA_GREEN;\n\t\t\tbreak;\n\t\tcase CCLVividColor.GRAPE_PURPLE:\n\t\t\tbodyColor = CCLPastelColor.AKEBI_PURPLE;\n\t\t\tbreak;\n\t\tcase CCLVividColor.WRAP_GREY:\n\t\t\tbodyColor = CCLPastelColor.CLOUD_GREY;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbodyColor = CCLPastelColor.PEACH_PINK;\n\t\t\tbreak;\n\t}\n\t/**\n\t * テーブルのヘッダー\n\t * 一次元配列で自由長、\n\t * @type Array<string>\n\t */\n\texport let dataHeader: string[];\n\t/**\n\t * テーブルにいれるデータ\n\t * 2次元の配列で自由長\n\t * @type Array<string | number>\n\t */\n\texport let tableData: string | number[][];\n</script>\n\n<!--汎用テーブル-->\n<div class=\"table-wrapper\">\n\t<table>\n\t\t<!--テーブルヘッダー-->\n\t\t<thead class=\"table-header\" style=\"--bgColor: var({tableColor})\">\n\t\t\t<tr>\n\t\t\t\t{#each dataHeader as title, index}\n\t\t\t\t\t<th>{title}</th>\n\t\t\t\t{/each}\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t{#each tableData as row}\n\t\t\t<tr class=\"table-body-style\" style=\"--table-body-color: var({bodyColor})\">\n\t\t\t\t{#each row as data}\n\t\t\t\t\t<td>{data}</td>\n\t\t\t\t{/each}\n\t\t\t</tr>\n\t\t{/each}\n\t\t</tbody>\n\t</table>\n</div>\n\n<style>\n\tth {\n\t\tpadding: 5px 60px;\n\t}\n\n\tthead {\n\t\tposition: sticky;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twhite-space: nowrap;\n\t}\n\n\ttable {\n\t\tborder-collapse: collapse;\n\t\twidth: 100%;\n\t}\n\n\t.table-wrapper {\n\t\toverflow-y: auto;\n\t\tmax-width: 90%;\n\t\theight: 200px;\n\t\t-webkit-overflow-scrolling: touch;\n\t}\n\n\t.table-header {\n\t\tbackground-color: var(--bgColor);\n\t\tcolor: #ffffff;\n\t}\n\t.table-body-style {\n\t\ttext-align: center;\n\t\tcolor: var(--wrap-grey);\n\t\twhite-space: nowrap;\n\t}\n\t.table-body-style:nth-child(odd) {\n\t\tbackground-color: var(--table-body-color);\n\t}\n</style>\n"],"names":["ensure_array_like","array_like_or_iterator","ctx","length","i","cov_jowf863gt","s","CCLVividColor","SODA_BLUE","b"],"mappings":"sRAKO,SAASA,EAAkBC,EAAwB,CACzD,OAAOA,GAAA,YAAAA,EAAwB,UAAW,OACvCA,EACA,MAAM,KAAKA,CAAsB,CACrC,8r/BCqDoBC,SAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,OAAAC,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,QAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,OAAAC,KAAAC,EAAA,EAAAC,EAAA,EAAA,yyBAAAJ,oCAAAC,OAAAC,8PAAAD,o5GA5DZI,EAAAC,UAAAH,EAAA,EAAAI,EAAA,EAAA,EAAA,CAAA,IAAAJ,EAAA,EAAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","x_google_ignoreList":[0]}