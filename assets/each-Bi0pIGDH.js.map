{"version":3,"file":"each-Bi0pIGDH.js","sources":["../../../node_modules/.pnpm/svelte@5.38.7/node_modules/svelte/src/internal/client/dom/hydration.js","../../../node_modules/.pnpm/svelte@5.38.7/node_modules/svelte/src/internal/client/dom/blocks/each.js"],"sourcesContent":["/** @import { TemplateNode } from '#client' */\n\nimport { COMMENT_NODE } from '#client/constants';\nimport {\n\tHYDRATION_END,\n\tHYDRATION_ERROR,\n\tHYDRATION_START,\n\tHYDRATION_START_ELSE\n} from '../../../constants.js';\nimport * as w from '../warnings.js';\nimport { get_next_sibling } from './operations.js';\n\n/**\n * Use this variable to guard everything related to hydration code so it can be treeshaken out\n * if the user doesn't use the `hydrate` method and these code paths are therefore not needed.\n */\nexport let hydrating = false;\n\n/** @param {boolean} value */\nexport function set_hydrating(value) {\n\thydrating = value;\n}\n\n/**\n * The node that is currently being hydrated. This starts out as the first node inside the opening\n * <!--[--> comment, and updates each time a component calls `$.child(...)` or `$.sibling(...)`.\n * When entering a block (e.g. `{#if ...}`), `hydrate_node` is the block opening comment; by the\n * time we leave the block it is the closing comment, which serves as the block's anchor.\n * @type {TemplateNode}\n */\nexport let hydrate_node;\n\n/** @param {TemplateNode} node */\nexport function set_hydrate_node(node) {\n\tif (node === null) {\n\t\tw.hydration_mismatch();\n\t\tthrow HYDRATION_ERROR;\n\t}\n\n\treturn (hydrate_node = node);\n}\n\nexport function hydrate_next() {\n\treturn set_hydrate_node(/** @type {TemplateNode} */ (get_next_sibling(hydrate_node)));\n}\n\n/** @param {TemplateNode} node */\nexport function reset(node) {\n\tif (!hydrating) return;\n\n\t// If the node has remaining siblings, something has gone wrong\n\tif (get_next_sibling(hydrate_node) !== null) {\n\t\tw.hydration_mismatch();\n\t\tthrow HYDRATION_ERROR;\n\t}\n\n\thydrate_node = node;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n */\nexport function hydrate_template(template) {\n\tif (hydrating) {\n\t\t// @ts-expect-error TemplateNode doesn't include DocumentFragment, but it's actually fine\n\t\thydrate_node = template.content;\n\t}\n}\n\nexport function next(count = 1) {\n\tif (hydrating) {\n\t\tvar i = count;\n\t\tvar node = hydrate_node;\n\n\t\twhile (i--) {\n\t\t\tnode = /** @type {TemplateNode} */ (get_next_sibling(node));\n\t\t}\n\n\t\thydrate_node = node;\n\t}\n}\n\n/**\n * Removes all nodes starting at `hydrate_node` up until the next hydration end comment\n */\nexport function remove_nodes() {\n\tvar depth = 0;\n\tvar node = hydrate_node;\n\n\twhile (true) {\n\t\tif (node.nodeType === COMMENT_NODE) {\n\t\t\tvar data = /** @type {Comment} */ (node).data;\n\n\t\t\tif (data === HYDRATION_END) {\n\t\t\t\tif (depth === 0) return node;\n\t\t\t\tdepth -= 1;\n\t\t\t} else if (data === HYDRATION_START || data === HYDRATION_START_ELSE) {\n\t\t\t\tdepth += 1;\n\t\t\t}\n\t\t}\n\n\t\tvar next = /** @type {TemplateNode} */ (get_next_sibling(node));\n\t\tnode.remove();\n\t\tnode = next;\n\t}\n}\n\n/**\n *\n * @param {TemplateNode} node\n */\nexport function read_hydration_instruction(node) {\n\tif (!node || node.nodeType !== COMMENT_NODE) {\n\t\tw.hydration_mismatch();\n\t\tthrow HYDRATION_ERROR;\n\t}\n\n\treturn /** @type {Comment} */ (node).data;\n}\n","/** @import { EachItem, EachState, Effect, MaybeSource, Source, TemplateNode, TransitionManager, Value } from '#client' */\n/** @import { Batch } from '../../reactivity/batch.js'; */\nimport {\n\tEACH_INDEX_REACTIVE,\n\tEACH_IS_ANIMATED,\n\tEACH_IS_CONTROLLED,\n\tEACH_ITEM_IMMUTABLE,\n\tEACH_ITEM_REACTIVE,\n\tHYDRATION_END,\n\tHYDRATION_START_ELSE\n} from '../../../../constants.js';\nimport {\n\thydrate_next,\n\thydrate_node,\n\thydrating,\n\tread_hydration_instruction,\n\tremove_nodes,\n\tset_hydrate_node,\n\tset_hydrating\n} from '../hydration.js';\nimport {\n\tclear_text_content,\n\tcreate_text,\n\tget_first_child,\n\tget_next_sibling,\n\tshould_defer_append\n} from '../operations.js';\nimport {\n\tblock,\n\tbranch,\n\tdestroy_effect,\n\trun_out_transitions,\n\tpause_children,\n\tpause_effect,\n\tresume_effect\n} from '../../reactivity/effects.js';\nimport { source, mutable_source, internal_set } from '../../reactivity/sources.js';\nimport { array_from, is_array } from '../../../shared/utils.js';\nimport { COMMENT_NODE, INERT } from '#client/constants';\nimport { queue_micro_task } from '../task.js';\nimport { active_effect, get } from '../../runtime.js';\nimport { DEV } from 'esm-env';\nimport { derived_safe_equal } from '../../reactivity/deriveds.js';\nimport { current_batch } from '../../reactivity/batch.js';\n\n/**\n * The row of a keyed each block that is currently updating. We track this\n * so that `animate:` directives have something to attach themselves to\n * @type {EachItem | null}\n */\nexport let current_each_item = null;\n\n/** @param {EachItem | null} item */\nexport function set_current_each_item(item) {\n\tcurrent_each_item = item;\n}\n\n/**\n * @param {any} _\n * @param {number} i\n */\nexport function index(_, i) {\n\treturn i;\n}\n\n/**\n * Pause multiple effects simultaneously, and coordinate their\n * subsequent destruction. Used in each blocks\n * @param {EachState} state\n * @param {EachItem[]} items\n * @param {null | Node} controlled_anchor\n */\nfunction pause_effects(state, items, controlled_anchor) {\n\tvar items_map = state.items;\n\n\t/** @type {TransitionManager[]} */\n\tvar transitions = [];\n\tvar length = items.length;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tpause_children(items[i].e, transitions, true);\n\t}\n\n\tvar is_controlled = length > 0 && transitions.length === 0 && controlled_anchor !== null;\n\t// If we have a controlled anchor, it means that the each block is inside a single\n\t// DOM element, so we can apply a fast-path for clearing the contents of the element.\n\tif (is_controlled) {\n\t\tvar parent_node = /** @type {Element} */ (\n\t\t\t/** @type {Element} */ (controlled_anchor).parentNode\n\t\t);\n\t\tclear_text_content(parent_node);\n\t\tparent_node.append(/** @type {Element} */ (controlled_anchor));\n\t\titems_map.clear();\n\t\tlink(state, items[0].prev, items[length - 1].next);\n\t}\n\n\trun_out_transitions(transitions, () => {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tvar item = items[i];\n\t\t\tif (!is_controlled) {\n\t\t\t\titems_map.delete(item.k);\n\t\t\t\tlink(state, item.prev, item.next);\n\t\t\t}\n\t\t\tdestroy_effect(item.e, !is_controlled);\n\t\t}\n\t});\n}\n\n/**\n * @template V\n * @param {Element | Comment} node The next sibling node, or the parent node if this is a 'controlled' block\n * @param {number} flags\n * @param {() => V[]} get_collection\n * @param {(value: V, index: number) => any} get_key\n * @param {(anchor: Node, item: MaybeSource<V>, index: MaybeSource<number>) => void} render_fn\n * @param {null | ((anchor: Node) => void)} fallback_fn\n * @returns {void}\n */\nexport function each(node, flags, get_collection, get_key, render_fn, fallback_fn = null) {\n\tvar anchor = node;\n\n\t/** @type {EachState} */\n\tvar state = { flags, items: new Map(), first: null };\n\n\tvar is_controlled = (flags & EACH_IS_CONTROLLED) !== 0;\n\n\tif (is_controlled) {\n\t\tvar parent_node = /** @type {Element} */ (node);\n\n\t\tanchor = hydrating\n\t\t\t? set_hydrate_node(/** @type {Comment | Text} */ (get_first_child(parent_node)))\n\t\t\t: parent_node.appendChild(create_text());\n\t}\n\n\tif (hydrating) {\n\t\thydrate_next();\n\t}\n\n\t/** @type {Effect | null} */\n\tvar fallback = null;\n\n\tvar was_empty = false;\n\n\t/** @type {Map<any, EachItem>} */\n\tvar offscreen_items = new Map();\n\n\t// TODO: ideally we could use derived for runes mode but because of the ability\n\t// to use a store which can be mutated, we can't do that here as mutating a store\n\t// will still result in the collection array being the same from the store\n\tvar each_array = derived_safe_equal(() => {\n\t\tvar collection = get_collection();\n\n\t\treturn is_array(collection) ? collection : collection == null ? [] : array_from(collection);\n\t});\n\n\t/** @type {V[]} */\n\tvar array;\n\n\t/** @type {Effect} */\n\tvar each_effect;\n\n\tfunction commit() {\n\t\treconcile(\n\t\t\teach_effect,\n\t\t\tarray,\n\t\t\tstate,\n\t\t\toffscreen_items,\n\t\t\tanchor,\n\t\t\trender_fn,\n\t\t\tflags,\n\t\t\tget_key,\n\t\t\tget_collection\n\t\t);\n\n\t\tif (fallback_fn !== null) {\n\t\t\tif (array.length === 0) {\n\t\t\t\tif (fallback) {\n\t\t\t\t\tresume_effect(fallback);\n\t\t\t\t} else {\n\t\t\t\t\tfallback = branch(() => fallback_fn(anchor));\n\t\t\t\t}\n\t\t\t} else if (fallback !== null) {\n\t\t\t\tpause_effect(fallback, () => {\n\t\t\t\t\tfallback = null;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tblock(() => {\n\t\t// store a reference to the effect so that we can update the start/end nodes in reconciliation\n\t\teach_effect ??= /** @type {Effect} */ (active_effect);\n\n\t\tarray = /** @type {V[]} */ (get(each_array));\n\t\tvar length = array.length;\n\n\t\tif (was_empty && length === 0) {\n\t\t\t// ignore updates if the array is empty,\n\t\t\t// and it already was empty on previous run\n\t\t\treturn;\n\t\t}\n\t\twas_empty = length === 0;\n\n\t\t/** `true` if there was a hydration mismatch. Needs to be a `let` or else it isn't treeshaken out */\n\t\tlet mismatch = false;\n\n\t\tif (hydrating) {\n\t\t\tvar is_else = read_hydration_instruction(anchor) === HYDRATION_START_ELSE;\n\n\t\t\tif (is_else !== (length === 0)) {\n\t\t\t\t// hydration mismatch â€” remove the server-rendered DOM and start over\n\t\t\t\tanchor = remove_nodes();\n\n\t\t\t\tset_hydrate_node(anchor);\n\t\t\t\tset_hydrating(false);\n\t\t\t\tmismatch = true;\n\t\t\t}\n\t\t}\n\n\t\t// this is separate to the previous block because `hydrating` might change\n\t\tif (hydrating) {\n\t\t\t/** @type {EachItem | null} */\n\t\t\tvar prev = null;\n\n\t\t\t/** @type {EachItem} */\n\t\t\tvar item;\n\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tif (\n\t\t\t\t\thydrate_node.nodeType === COMMENT_NODE &&\n\t\t\t\t\t/** @type {Comment} */ (hydrate_node).data === HYDRATION_END\n\t\t\t\t) {\n\t\t\t\t\t// The server rendered fewer items than expected,\n\t\t\t\t\t// so break out and continue appending non-hydrated items\n\t\t\t\t\tanchor = /** @type {Comment} */ (hydrate_node);\n\t\t\t\t\tmismatch = true;\n\t\t\t\t\tset_hydrating(false);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvar value = array[i];\n\t\t\t\tvar key = get_key(value, i);\n\t\t\t\titem = create_item(\n\t\t\t\t\thydrate_node,\n\t\t\t\t\tstate,\n\t\t\t\t\tprev,\n\t\t\t\t\tnull,\n\t\t\t\t\tvalue,\n\t\t\t\t\tkey,\n\t\t\t\t\ti,\n\t\t\t\t\trender_fn,\n\t\t\t\t\tflags,\n\t\t\t\t\tget_collection\n\t\t\t\t);\n\t\t\t\tstate.items.set(key, item);\n\n\t\t\t\tprev = item;\n\t\t\t}\n\n\t\t\t// remove excess nodes\n\t\t\tif (length > 0) {\n\t\t\t\tset_hydrate_node(remove_nodes());\n\t\t\t}\n\t\t}\n\n\t\tif (hydrating) {\n\t\t\tif (length === 0 && fallback_fn) {\n\t\t\t\tfallback = branch(() => fallback_fn(anchor));\n\t\t\t}\n\t\t} else {\n\t\t\tif (should_defer_append()) {\n\t\t\t\tvar keys = new Set();\n\t\t\t\tvar batch = /** @type {Batch} */ (current_batch);\n\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tvalue = array[i];\n\t\t\t\t\tkey = get_key(value, i);\n\n\t\t\t\t\tvar existing = state.items.get(key) ?? offscreen_items.get(key);\n\n\t\t\t\t\tif (existing) {\n\t\t\t\t\t\t// update before reconciliation, to trigger any async updates\n\t\t\t\t\t\tif ((flags & (EACH_ITEM_REACTIVE | EACH_INDEX_REACTIVE)) !== 0) {\n\t\t\t\t\t\t\tupdate_item(existing, value, i, flags);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\titem = create_item(\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\trender_fn,\n\t\t\t\t\t\t\tflags,\n\t\t\t\t\t\t\tget_collection,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\toffscreen_items.set(key, item);\n\t\t\t\t\t}\n\n\t\t\t\t\tkeys.add(key);\n\t\t\t\t}\n\n\t\t\t\tfor (const [key, item] of state.items) {\n\t\t\t\t\tif (!keys.has(key)) {\n\t\t\t\t\t\tbatch.skipped_effects.add(item.e);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbatch.add_callback(commit);\n\t\t\t} else {\n\t\t\t\tcommit();\n\t\t\t}\n\t\t}\n\n\t\tif (mismatch) {\n\t\t\t// continue in hydration mode\n\t\t\tset_hydrating(true);\n\t\t}\n\n\t\t// When we mount the each block for the first time, the collection won't be\n\t\t// connected to this effect as the effect hasn't finished running yet and its deps\n\t\t// won't be assigned. However, it's possible that when reconciling the each block\n\t\t// that a mutation occurred and it's made the collection MAYBE_DIRTY, so reading the\n\t\t// collection again can provide consistency to the reactive graph again as the deriveds\n\t\t// will now be `CLEAN`.\n\t\tget(each_array);\n\t});\n\n\tif (hydrating) {\n\t\tanchor = hydrate_node;\n\t}\n}\n\n/**\n * Add, remove, or reorder items output by an each block as its input changes\n * @template V\n * @param {Effect} each_effect\n * @param {Array<V>} array\n * @param {EachState} state\n * @param {Map<any, EachItem>} offscreen_items\n * @param {Element | Comment | Text} anchor\n * @param {(anchor: Node, item: MaybeSource<V>, index: number | Source<number>, collection: () => V[]) => void} render_fn\n * @param {number} flags\n * @param {(value: V, index: number) => any} get_key\n * @param {() => V[]} get_collection\n * @returns {void}\n */\nfunction reconcile(\n\teach_effect,\n\tarray,\n\tstate,\n\toffscreen_items,\n\tanchor,\n\trender_fn,\n\tflags,\n\tget_key,\n\tget_collection\n) {\n\tvar is_animated = (flags & EACH_IS_ANIMATED) !== 0;\n\tvar should_update = (flags & (EACH_ITEM_REACTIVE | EACH_INDEX_REACTIVE)) !== 0;\n\n\tvar length = array.length;\n\tvar items = state.items;\n\tvar first = state.first;\n\tvar current = first;\n\n\t/** @type {undefined | Set<EachItem>} */\n\tvar seen;\n\n\t/** @type {EachItem | null} */\n\tvar prev = null;\n\n\t/** @type {undefined | Set<EachItem>} */\n\tvar to_animate;\n\n\t/** @type {EachItem[]} */\n\tvar matched = [];\n\n\t/** @type {EachItem[]} */\n\tvar stashed = [];\n\n\t/** @type {V} */\n\tvar value;\n\n\t/** @type {any} */\n\tvar key;\n\n\t/** @type {EachItem | undefined} */\n\tvar item;\n\n\t/** @type {number} */\n\tvar i;\n\n\tif (is_animated) {\n\t\tfor (i = 0; i < length; i += 1) {\n\t\t\tvalue = array[i];\n\t\t\tkey = get_key(value, i);\n\t\t\titem = items.get(key);\n\n\t\t\tif (item !== undefined) {\n\t\t\t\titem.a?.measure();\n\t\t\t\t(to_animate ??= new Set()).add(item);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (i = 0; i < length; i += 1) {\n\t\tvalue = array[i];\n\t\tkey = get_key(value, i);\n\n\t\titem = items.get(key);\n\n\t\tif (item === undefined) {\n\t\t\tvar pending = offscreen_items.get(key);\n\n\t\t\tif (pending !== undefined) {\n\t\t\t\toffscreen_items.delete(key);\n\t\t\t\titems.set(key, pending);\n\n\t\t\t\tvar next = prev ? prev.next : current;\n\n\t\t\t\tlink(state, prev, pending);\n\t\t\t\tlink(state, pending, next);\n\n\t\t\t\tmove(pending, next, anchor);\n\t\t\t\tprev = pending;\n\t\t\t} else {\n\t\t\t\tvar child_anchor = current ? /** @type {TemplateNode} */ (current.e.nodes_start) : anchor;\n\n\t\t\t\tprev = create_item(\n\t\t\t\t\tchild_anchor,\n\t\t\t\t\tstate,\n\t\t\t\t\tprev,\n\t\t\t\t\tprev === null ? state.first : prev.next,\n\t\t\t\t\tvalue,\n\t\t\t\t\tkey,\n\t\t\t\t\ti,\n\t\t\t\t\trender_fn,\n\t\t\t\t\tflags,\n\t\t\t\t\tget_collection\n\t\t\t\t);\n\t\t\t}\n\n\t\t\titems.set(key, prev);\n\n\t\t\tmatched = [];\n\t\t\tstashed = [];\n\n\t\t\tcurrent = prev.next;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (should_update) {\n\t\t\tupdate_item(item, value, i, flags);\n\t\t}\n\n\t\tif ((item.e.f & INERT) !== 0) {\n\t\t\tresume_effect(item.e);\n\t\t\tif (is_animated) {\n\t\t\t\titem.a?.unfix();\n\t\t\t\t(to_animate ??= new Set()).delete(item);\n\t\t\t}\n\t\t}\n\n\t\tif (item !== current) {\n\t\t\tif (seen !== undefined && seen.has(item)) {\n\t\t\t\tif (matched.length < stashed.length) {\n\t\t\t\t\t// more efficient to move later items to the front\n\t\t\t\t\tvar start = stashed[0];\n\t\t\t\t\tvar j;\n\n\t\t\t\t\tprev = start.prev;\n\n\t\t\t\t\tvar a = matched[0];\n\t\t\t\t\tvar b = matched[matched.length - 1];\n\n\t\t\t\t\tfor (j = 0; j < matched.length; j += 1) {\n\t\t\t\t\t\tmove(matched[j], start, anchor);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (j = 0; j < stashed.length; j += 1) {\n\t\t\t\t\t\tseen.delete(stashed[j]);\n\t\t\t\t\t}\n\n\t\t\t\t\tlink(state, a.prev, b.next);\n\t\t\t\t\tlink(state, prev, a);\n\t\t\t\t\tlink(state, b, start);\n\n\t\t\t\t\tcurrent = start;\n\t\t\t\t\tprev = b;\n\t\t\t\t\ti -= 1;\n\n\t\t\t\t\tmatched = [];\n\t\t\t\t\tstashed = [];\n\t\t\t\t} else {\n\t\t\t\t\t// more efficient to move earlier items to the back\n\t\t\t\t\tseen.delete(item);\n\t\t\t\t\tmove(item, current, anchor);\n\n\t\t\t\t\tlink(state, item.prev, item.next);\n\t\t\t\t\tlink(state, item, prev === null ? state.first : prev.next);\n\t\t\t\t\tlink(state, prev, item);\n\n\t\t\t\t\tprev = item;\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmatched = [];\n\t\t\tstashed = [];\n\n\t\t\twhile (current !== null && current.k !== key) {\n\t\t\t\t// If the each block isn't inert and an item has an effect that is already inert,\n\t\t\t\t// skip over adding it to our seen Set as the item is already being handled\n\t\t\t\tif ((current.e.f & INERT) === 0) {\n\t\t\t\t\t(seen ??= new Set()).add(current);\n\t\t\t\t}\n\t\t\t\tstashed.push(current);\n\t\t\t\tcurrent = current.next;\n\t\t\t}\n\n\t\t\tif (current === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\titem = current;\n\t\t}\n\n\t\tmatched.push(item);\n\t\tprev = item;\n\t\tcurrent = item.next;\n\t}\n\n\tif (current !== null || seen !== undefined) {\n\t\tvar to_destroy = seen === undefined ? [] : array_from(seen);\n\n\t\twhile (current !== null) {\n\t\t\t// If the each block isn't inert, then inert effects are currently outroing and will be removed once the transition is finished\n\t\t\tif ((current.e.f & INERT) === 0) {\n\t\t\t\tto_destroy.push(current);\n\t\t\t}\n\t\t\tcurrent = current.next;\n\t\t}\n\n\t\tvar destroy_length = to_destroy.length;\n\n\t\tif (destroy_length > 0) {\n\t\t\tvar controlled_anchor = (flags & EACH_IS_CONTROLLED) !== 0 && length === 0 ? anchor : null;\n\n\t\t\tif (is_animated) {\n\t\t\t\tfor (i = 0; i < destroy_length; i += 1) {\n\t\t\t\t\tto_destroy[i].a?.measure();\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0; i < destroy_length; i += 1) {\n\t\t\t\t\tto_destroy[i].a?.fix();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpause_effects(state, to_destroy, controlled_anchor);\n\t\t}\n\t}\n\n\tif (is_animated) {\n\t\tqueue_micro_task(() => {\n\t\t\tif (to_animate === undefined) return;\n\t\t\tfor (item of to_animate) {\n\t\t\t\titem.a?.apply();\n\t\t\t}\n\t\t});\n\t}\n\n\teach_effect.first = state.first && state.first.e;\n\teach_effect.last = prev && prev.e;\n\n\tfor (var unused of offscreen_items.values()) {\n\t\tdestroy_effect(unused.e);\n\t}\n\n\toffscreen_items.clear();\n}\n\n/**\n * @param {EachItem} item\n * @param {any} value\n * @param {number} index\n * @param {number} type\n * @returns {void}\n */\nfunction update_item(item, value, index, type) {\n\tif ((type & EACH_ITEM_REACTIVE) !== 0) {\n\t\tinternal_set(item.v, value);\n\t}\n\n\tif ((type & EACH_INDEX_REACTIVE) !== 0) {\n\t\tinternal_set(/** @type {Value<number>} */ (item.i), index);\n\t} else {\n\t\titem.i = index;\n\t}\n}\n\n/**\n * @template V\n * @param {Node | null} anchor\n * @param {EachState} state\n * @param {EachItem | null} prev\n * @param {EachItem | null} next\n * @param {V} value\n * @param {unknown} key\n * @param {number} index\n * @param {(anchor: Node, item: V | Source<V>, index: number | Value<number>, collection: () => V[]) => void} render_fn\n * @param {number} flags\n * @param {() => V[]} get_collection\n * @param {boolean} [deferred]\n * @returns {EachItem}\n */\nfunction create_item(\n\tanchor,\n\tstate,\n\tprev,\n\tnext,\n\tvalue,\n\tkey,\n\tindex,\n\trender_fn,\n\tflags,\n\tget_collection,\n\tdeferred\n) {\n\tvar previous_each_item = current_each_item;\n\tvar reactive = (flags & EACH_ITEM_REACTIVE) !== 0;\n\tvar mutable = (flags & EACH_ITEM_IMMUTABLE) === 0;\n\n\tvar v = reactive ? (mutable ? mutable_source(value, false, false) : source(value)) : value;\n\tvar i = (flags & EACH_INDEX_REACTIVE) === 0 ? index : source(index);\n\n\tif (DEV && reactive) {\n\t\t// For tracing purposes, we need to link the source signal we create with the\n\t\t// collection + index so that tracing works as intended\n\t\t/** @type {Value} */ (v).trace = () => {\n\t\t\tvar collection_index = typeof i === 'number' ? index : i.v;\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\t\t\tget_collection()[collection_index];\n\t\t};\n\t}\n\n\t/** @type {EachItem} */\n\tvar item = {\n\t\ti,\n\t\tv,\n\t\tk: key,\n\t\ta: null,\n\t\t// @ts-expect-error\n\t\te: null,\n\t\tprev,\n\t\tnext\n\t};\n\n\tcurrent_each_item = item;\n\n\ttry {\n\t\tif (anchor === null) {\n\t\t\tvar fragment = document.createDocumentFragment();\n\t\t\tfragment.append((anchor = create_text()));\n\t\t}\n\n\t\titem.e = branch(() => render_fn(/** @type {Node} */ (anchor), v, i, get_collection), hydrating);\n\n\t\titem.e.prev = prev && prev.e;\n\t\titem.e.next = next && next.e;\n\n\t\tif (prev === null) {\n\t\t\tif (!deferred) {\n\t\t\t\tstate.first = item;\n\t\t\t}\n\t\t} else {\n\t\t\tprev.next = item;\n\t\t\tprev.e.next = item.e;\n\t\t}\n\n\t\tif (next !== null) {\n\t\t\tnext.prev = item;\n\t\t\tnext.e.prev = item.e;\n\t\t}\n\n\t\treturn item;\n\t} finally {\n\t\tcurrent_each_item = previous_each_item;\n\t}\n}\n\n/**\n * @param {EachItem} item\n * @param {EachItem | null} next\n * @param {Text | Element | Comment} anchor\n */\nfunction move(item, next, anchor) {\n\tvar end = item.next ? /** @type {TemplateNode} */ (item.next.e.nodes_start) : anchor;\n\n\tvar dest = next ? /** @type {TemplateNode} */ (next.e.nodes_start) : anchor;\n\tvar node = /** @type {TemplateNode} */ (item.e.nodes_start);\n\n\twhile (node !== null && node !== end) {\n\t\tvar next_node = /** @type {TemplateNode} */ (get_next_sibling(node));\n\t\tdest.before(node);\n\t\tnode = next_node;\n\t}\n}\n\n/**\n * @param {EachState} state\n * @param {EachItem | null} prev\n * @param {EachItem | null} next\n */\nfunction link(state, prev, next) {\n\tif (prev === null) {\n\t\tstate.first = next;\n\t} else {\n\t\tprev.next = next;\n\t\tprev.e.next = next && next.e;\n\t}\n\n\tif (next !== null) {\n\t\tnext.prev = prev;\n\t\tnext.e.prev = prev && prev.e;\n\t}\n}\n"],"names":["hydrating","index","_","i","pause_effects","state","items","controlled_anchor","items_map","transitions","length","pause_children","is_controlled","parent_node","clear_text_content","link","run_out_transitions","item","destroy_effect","each","node","flags","get_collection","get_key","render_fn","fallback_fn","anchor","EACH_IS_CONTROLLED","create_text","fallback","was_empty","offscreen_items","each_array","derived_safe_equal","collection","is_array","array_from","array","each_effect","commit","reconcile","resume_effect","branch","pause_effect","block","active_effect","get","value","key","should_defer_append","keys","batch","current_batch","existing","EACH_ITEM_REACTIVE","EACH_INDEX_REACTIVE","update_item","create_item","is_animated","EACH_IS_ANIMATED","should_update","first","current","seen","prev","to_animate","matched","stashed","_a","pending","next","move","child_anchor","INERT","_b","start","j","a","b","to_destroy","destroy_length","_c","_d","queue_micro_task","unused","type","internal_set","deferred","reactive","mutable","EACH_ITEM_IMMUTABLE","v","mutable_source","source","fragment","end","dest","next_node","get_next_sibling"],"mappings":"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","x_google_ignoreList":[0,1]}