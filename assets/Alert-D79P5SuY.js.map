{"version":3,"file":"Alert-D79P5SuY.js","sources":["../../../src/lib/Alert.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { CCLVividColor } from './const/config';\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  /**\n   * The message to display in the alert.\n   * @type {string}\n   */\n  export let message: string;\n\n  /**\n   * The type of the alert, which determines its styling.\n   * @type {'success' | 'error' | 'warning' | 'info'}\n   * @default 'info'\n   */\n  export let type: 'success' | 'error' | 'warning' | 'info' = 'info';\n\n  /**\n   * Whether the alert can be dismissed by the user.\n   * @type {boolean}\n   * @default false\n   */\n  export let dismissible: boolean = false;\n\n  /**\n   * Whether the alert should have an outline style.\n   * @type {boolean}\n   * @default false\n   */\n  export let outline: boolean = false;\n\n  let baseColor: string;\n  let computedBgColor: string;\n  let computedBorderColor: string;\n  let textColor: string;\n\n  $: {\n    switch (type) {\n      case 'success':\n        baseColor = CCLVividColor.MELON_GREEN;\n        break;\n      case 'error':\n        baseColor = CCLVividColor.STRAWBERRY_PINK;\n        break;\n      case 'warning':\n        baseColor = CCLVividColor.PINEAPPLE_YELLOW;\n        break;\n      case 'info':\n        baseColor = CCLVividColor.SODA_BLUE;\n        break;\n      default:\n        baseColor = CCLVividColor.SODA_BLUE; // Fallback\n    }\n\n    if (outline) {\n      computedBgColor = 'transparent';\n      computedBorderColor = baseColor;\n      textColor = 'var(--wrap-grey)'; // Outline alerts usually have dark text for contrast\n    } else {\n      computedBgColor = baseColor;\n      computedBorderColor = 'transparent'; // No border for filled alerts\n      textColor = 'white'; // Default text color for filled alerts\n      if (type === 'warning') {\n        textColor = 'white'; // Ensure warning text is white for filled style\n      }\n    }\n  }\n\n  function dismissAlert() {\n    dispatch('dismiss');\n  }\n</script>\n\n<div\n  class=\"alert-wrapper\"\n  class:dismissible\n  class:outline\n  style=\"background-color: var({computedBgColor}); color: {textColor}; border-color: var({computedBorderColor});\"\n>\n  <span class=\"alert-message\">{message}</span>\n  {#if dismissible}\n    <button class=\"dismiss-button\" on:click={dismissAlert} aria-label=\"Dismiss alert\">\n      &times;\n    </button>\n  {/if}\n</div>\n\n<style>\n  .alert-wrapper {\n    padding: 12px 20px;\n    border-radius: 8px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 16px;\n    font-weight: 500;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    margin-bottom: 10px; /* Add some spacing when multiple alerts are shown */\n    border: 2px solid; /* Use solid border, color set by style attribute */\n  }\n\n  .alert-message {\n    flex-grow: 1;\n  }\n\n  .dismiss-button {\n    background: none;\n    border: none;\n    color: inherit; /* Inherit text color from parent */\n    font-size: 20px;\n    cursor: pointer;\n    margin-left: 15px;\n    padding: 0;\n    line-height: 1;\n    opacity: 0.7;\n    transition: opacity 0.2s ease-in-out;\n  }\n\n  .dismiss-button:hover {\n    opacity: 1;\n  }\n</style>\n"],"names":["dispatch","cov_1vnn4dv4v7","s","createEventDispatcher","type","baseColor","CCLVividColor","MELON_GREEN","b","STRAWBERRY_PINK","SODA_BLUE","$","textColor","message"],"mappings":"ikcAEW,MAAAA,GAAAC,EAAA,EAAAC,EAAA,CAAA,IAAAC,EAA6B,mRA4C7B,CAAAF,IAAAC,EAAA,EAAA,yFAfkBE,IAAA,2CAEvBC,EAAiBC,EAAAC,WAAA,EAAAN,IAAAC,EAAA,EAAA,cAEjB,QAAAD,EAAA,EAAAO,UAAAP,EAAA,EAAAC,EAAA,EAAA,MACAG,EAAiBC,EAAAG,eAAA,EAAAR,EAAA,EAAAC,EAAA,EAAA,wMAoCrBG,EAAAC,EAAAI,SAAA,6LAjCUC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAC,EAAI,OACLR,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,MAAS,WAAAH,IAAAO,EAAA,CAAA,EAAA,CAAA,IAAAP,EAAA,EAAAC,QACZS,EAAAC,EAAS,krBAYGC,EAAc,CAAA,mGAN1B"}